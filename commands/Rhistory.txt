R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin16.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(readr)
> finalResults <- read_csv("~/Documents/Sync/AllDevices/Education/Semester III/DT Seminar/Data/finalResults.csv",
+     col_types = cols(finalGender = col_factor(levels = c("male",
+         "unknown", "female", "unisex")),
+         merged = col_logical()))
> View(finalResults)
> finalResults$mergedNum <- as.numeric(finalResults$merged)
> finalResults$finalGenderNum <- as.numeric(finalResults$finalGender)
> corrtable$gender <- finalResults$finalGenderNum
Error in corrtable$gender <- finalResults$finalGenderNum :
  object 'corrtable' not found
> save(finalResults)
Error in save(finalResults) : 'file' must be specified
> save(finalResults, finalResults)
Error in save(finalResults, finalResults) : 'file' must be specified
> save('finalResults', finalResults)
Error in save("finalResults", finalResults) : 'file' must be specified
> cor(finalResults[5:6], use="complete.obs", method="pearson")
Error in cor(finalResults[5:6], use = "complete.obs", method = "pearson") :
  'x' must be numeric
> finalResults[5:6]
# A tibble: 183,249 × 2
   finalGender mergedNum
        <fctr>     <dbl>
1         male         1
2         male         1
3         male         1
4         male         1
5         male         0
6         male         0
7         male         1
8      unknown         0
9         male         1
10        male         1
# ... with 183,239 more rows
> finalResults[6:7]
# A tibble: 183,249 × 2
   mergedNum finalGenderNum
       <dbl>          <dbl>
1          1              1
2          1              1
3          1              1
4          1              1
5          0              1
6          0              1
7          1              1
8          0              2
9          1              1
10         1              1
# ... with 183,239 more rows
> cor(finalResults[6:7], use="complete.obs", method="pearson")
                 mergedNum finalGenderNum
mergedNum      1.000000000    0.001816595
finalGenderNum 0.001816595    1.000000000
> which(finalResults$repoName == "node")
   [1]     8    61    91    92    93    95   107   169   187   194   210   237   303   305   326   408   463   508
  [19]   520   524   569   578   603   604   631   707   721   729   746   763   782   785   815   819   822   850
  [37]   851   864   883   896   897   899   900   901   902   904   906   907   913   926   931   939   977   988
  [55]   994  1014  1016  1048  1064  1125  1157  1174  1204  1274  1285  1301  1306  1323  1385  1423  1458  1462
  [73]  1487  1524  1537  1538  1540  1544  1546  1548  1550  1552  1565  1629  1637  1641  1651  1680  1681  1684
  [91]  1720  1731  1738  1806  1872  1891  1927  1939  1943  1951  1969  1970  1985  1998  2014  2015  2017  2018
 [109]  2033  2042  2055  2071  2123  2152  2153  2158  2184  2189  2198  2206  2207  2346  2376  2406  2412  2435
 [127]  2447  2502  2503  2504  2507  2511  2533  2538  2561  2571  2576  2586  2587  2790  2884  2931  2992  3039
 [145] 47672 47710 47740 47780 47829 47858 47866 47909 48118 48123 48124 48126 48215 48265 48278 48279 48292 48293
 [163] 48294 48307 48339 48351 48355 48362 48377 48378 48428 48432 48443 48485 48545 48590 48605 48640 48641 48644
 [181] 48648 48655 48708 48763 48765 48777 48778 48780 48892 48951 48963 48983 48984 49098 49136 49142 49163 49177
 [199] 49189 49195 49292 49324 49335 49355 49375 49381 49393 49447 49495 49603 49610 49638 49741 49759 49778 49792
 [217] 49925 49962 50020 50031 50032 50052 50093 50095 50111 50140 50328 50398 50531 50666 50670 50743 50791 50806
 [235] 50817 50819 50821 50877 50906 50939 50991 51067 51068 51081 51090 51103 51308 51569 51591 51619 51672 51794
 [253] 51797 51798 51868 51887 51890 52006 52251 52274 52400 52448 52558 52591 52596 52613 52623 52643 52656 52683
 [271] 52686 52691 52695 52713 52743 52787 52801 52862 52866 52869 52894 52898 52918 52950 52986 53010 53043 53046
 [289] 53057 53061 53069 53082 53086 53105 53106 53109 53135 53154 53163 53187 53195 53199 53228 53259 53263 53283
 [307] 53288 53337 53351 53364 53377 53385 53387 53389 53401 53404 53406 53420 53427 53460 53466 53483 53485 53488
 [325] 53499 53522 53546 53560 53575 53578 53580 53582 53584 53592 53593 53595 53596 53599 53601 53602 53603 53605
 [343] 53606 53609 53624 53637 53639 53645 53654 53660 53674 53688 53702 53706 53708 53714 53715 53719 53726 53731
 [361] 53735 53745 53754 53779 53812 53817 53821 53849 53865 53875 53892 53906 53921 53943 53955 53964 53970 53976
 [379] 53996 53999 54014 54023 54042 54053 54074 54080 54135 54158 54166 54171 54176 54177 54187 54191 54195 54196
 [397] 54228 54246 54255 54276 54286 54292 54296 54318 54336 54339 54343 54355 54388 54389 54419 54421 54433 54434
 [415] 54439 54468 54493 54555 54570 54618 54623 54624 54632 54638 54705 54712 54729 54738 54759 54782 54818 54841
 [433] 54851 54866 54885 54888 54951 54980 54988 54993 55009 55016 55059 55066 55073 55124 55126 55129 55135 55139
 [451] 55140 55154 55161 55179 55232 55234 55235 55238 55251 55253 55258 55284 55324 55369 55391 55440 55447 55470
 [469] 55475 55488 55495 55497 55553 55576 55591 55625 55641 55642 55663 55682 55693 55722 55723 55725 55726 55814
 [487] 55819 55823 55863 55867 55893 55916 55945 55946 56021 56052 56063 56102 56134 56136 56142 56148 56151 56181
 [505] 56190 56191 56206 56223 56277 56453 56455 56506 56526 56585 56603 56604 56632 56638 56664 56756 56768 56803
 [523] 56805 56886 56888 56938 57001 57011 57053 57078 57108 57110 57187 57205 57224 57227 57230 57250 57270 57295
 [541] 57307 57358 57364 57365 57382 57445 57476 57534 57542 57545 57576 57619 57640 57648 57702 57711 57775 57794
 [559] 57815 57816 57870 57883 57924 57930 57933 57943 57949 57950 58001 58010 58030 58035 58051 58074 58076 58100
 [577] 58130 58144 58176 58182 58193 58235 58248 58345 58360 58391 58395 58397 58413 58473 58481 58482 58492 58509
 [595] 58513 58559 58695 58742 58823 58846 58862 58876 58992 58993 59002 59042 59046 59082 59121 59151 59166 59211
 [613] 59237 59241 59290 59305 59312 59322 59367 59394 59425 59431 59476 59485 59520 59521 59522 59570 59610 59619
 [631] 59690 59712 59715 59831 59834 59857 59877 59900 59980 59994 60009 60016 60051 60052 60057 60122 60130 60134
 [649] 60135 60170 60181 60237 60246 60277 60301 60312 60322 60370 60384 60386 60392 60400 60402 60409 60417 60425
 [667] 60432 60456 60458 60492 60534 60552 60563 60572 60581 60627 60650 60655 60660 60665 60737 60759 60776 60780
 [685] 60787 60812 60931 60955 60956 60964 60980 60988 60995 60996 61015 61068 61136 61139 61175 61190 61229 61232
 [703] 61253 61268 61346 61364 61369 61376 61378 61381 61413 61466 61478 61494 61527 61537 61543 61575 61603 61684
 [721] 61691 61711 61765 61785 61790 61792 61807 61812 61826 61880 61882 61894 61965 61979 62013 62021 62078 62101
 [739] 62135 62136 62180 62282 62295 62309 62336 62345 62611 62622 62647 62653 62678 62686 62690 62692 62719 62806
 [757] 62814 62834 62841 62843 62846 62876 62878 62879 62887 62895 62982 63035 63071 63101 63164 63178 63223 63231
 [775] 63276 63303 63349 63354 63360 63364 63379 63417 63441 63483 63555 63591 63604 63623 63624 63644 63672 63697
 [793] 63700 63716 63730 63798 63799 63806 63811 63813 63830 63835 63850 63870 63931 63945 64021 64037 64052 64055
 [811] 64060 64068 64082 64097 64117 64177 64208 64215 64225 64259 64416 64496 64565 64568 64583 64608 64645 64646
 [829] 64652 64682 64770 64836 64858 64977 65024 65034 65035 65046 65094 65103 65119 65138 65157 65188 65239 65264
 [847] 65316 65354 65446 65460 65516 65685 65753 65839 65866 65959 66046 66052 66076 66123 66130 66136 66142 66175
 [865] 66294 66303 66356 66366 66376 66390 66409 66410 66424 66435 66455 66621 66629 66647 66693 66716 66753 66769
 [883] 66780 66879 66921 66936 66998 67028 67030 67037 67094 67135 67154 67155 67156 67177 67186 67191 67363 67392
 [901] 67437 67453 67505 67574 67587 67595 67602 67643 67775 67815 67817 67822 67950 67964 67988 68001 68003 68064
 [919] 68167 68203 68208 68231 68332 68368 68488 68559 68560 68588 68638 68658 68675 68770 68799 68815 68841 68863
 [937] 68867 68875 68915 68923 68930 68931 68961 68980 68989 69059 69092 69103 69122 69140 69142 69258 69298 69329
 [955] 69336 69354 69409 69473 69508 69542 69543 69605 69612 69735 69741 69756 69855 69868 69956 70018 70039 70080
 [973] 70089 70110 70254 70257 70293 70328 70329 70330 70338 70417 70471 70483 70513 70540 70600 70668 70689 70724
 [991] 70764 70768 70818 70826 70837 70868 70871 70893 70901 70916
 [ reached getOption("max.print") -- omitted 4721 entries ]
> finalResults[which(finalResults$repoName == "node")]
Error: Invalid column indexes: 8, 61, 91, 92, 93, 95, 107, 169, 187, 194, 210, 237, 303, 305, 326, 408, 463, 508, 520, 524, 569, 578, 603, 604, 631, 707, 721, 729, 746, 763, 782, 785, 815, 819, 822, 850, 851, 864, 883, 896, 897, 899, 900, 901, 902, 904, 906, 907, 913, 926, 931, 939, 977, 988, 994, 1014, 1016, 1048, 1064, 1125, 1157, 1174, 1204, 1274, 1285, 1301, 1306, 1323, 1385, 1423, 1458, 1462, 1487, 1524, 1537, 1538, 1540, 1544, 1546, 1548, 1550, 1552, 1565, 1629, 1637, 1641, 1651, 1680, 1681, 1684, 1720, 1731, 1738, 1806, 1872, 1891, 1927, 1939, 1943, 1951, 1969, 1970, 1985, 1998, 2014, 2015, 2017, 2018, 2033, 2042, 2055, 2071, 2123, 2152, 2153, 2158, 2184, 2189, 2198, 2206, 2207, 2346, 2376, 2406, 2412, 2435, 2447, 2502, 2503, 2504, 2507, 2511, 2533, 2538, 2561, 2571, 2576, 2586, 2587, 2790, 2884, 2931, 2992, 3039, 47672, 47710, 47740, 47780, 47829, 47858, 47866, 47909, 48118, 48123, 48124, 48126, 48215, 48265, 48278, 48279, 48292, 48293, 48294, 48307, 48339, 48351, 48355, 48362
> finalResults[finalResults$repoName == "node"]
Error: Length of logical index vector must be 1 or 7, got: 183249
> finalResults[finalResults$repoName == "node",]
# A tibble: 5,721 × 7
    gh_pr_id repoName merged        login finalGender mergedNum finalGenderNum
       <int>    <chr>  <lgl>        <chr>      <fctr>     <dbl>          <dbl>
1  100007286     node  FALSE thefourtheye     unknown         0              2
2  100046375     node  FALSE       edsadr        male         0              1
3  100064266     node  FALSE      jasnell        male         0              1
4  100065332     node  FALSE      jasnell        male         0              1
5  100065916     node  FALSE  joyeecheung     unknown         0              2
6  100067092     node  FALSE      jasnell        male         0              1
7  100073113     node  FALSE      sivaprs     unknown         0              2
8  100120856     node  FALSE      Kerumen     unknown         0              2
9  100148670     node  FALSE     addaleax     unknown         0              2
10 100154086     node  FALSE thefourtheye     unknown         0              2
# ... with 5,711 more rows
> node <- finalResults[finalResults$repoName == "node",]
> cor(node[6:7], use="complete.obs", method="pearson")
                mergedNum finalGenderNum
mergedNum       1.0000000     -0.1843544
finalGenderNum -0.1843544      1.0000000
> ghost <- finalResults[finalResults$repoName == "Ghost",]
> cor(ghost[6:7], use="complete.obs", method="pearson")
               mergedNum finalGenderNum
mergedNum      1.0000000      0.1116818
finalGenderNum 0.1116818      1.0000000
> jquery <- finalResults[finalResults$repoName == "jquery",]
> cor(jquery[6:7], use="complete.obs", method="pearson")
               mergedNum finalGenderNum
mergedNum        1.00000       -0.13803
finalGenderNum  -0.13803        1.00000
> angular <- finalResults[finalResults$repoName == "angular",]
> cor(angular[6:7], use="complete.obs", method="pearson")
                 mergedNum finalGenderNum
mergedNum      1.000000000    0.007628191
finalGenderNum 0.007628191    1.000000000
> angularjs <- finalResults[finalResults$repoName == "angular.js",]
> cor(angularjs[6:7], use="complete.obs", method="pearson")
                 mergedNum finalGenderNum
mergedNum       1.00000000    -0.07409052
finalGenderNum -0.07409052     1.00000000
> cor(node[6:7], use="complete.obs", method="pearson")
                mergedNum finalGenderNum
mergedNum       1.0000000     -0.1843544
finalGenderNum -0.1843544      1.0000000
> cor(moment[6:7], use="complete.obs", method="pearson")
Error in is.data.frame(x) : object 'moment' not found
> moment <- finalResults[finalResults$repoName == "moment",]
> cor(moment[6:7], use="complete.obs", method="pearson")
                mergedNum finalGenderNum
mergedNum       1.0000000     -0.2171543
finalGenderNum -0.2171543      1.0000000
